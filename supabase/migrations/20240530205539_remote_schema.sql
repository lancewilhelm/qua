
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."add_code_instance"("new_code" "text", "project_id" integer, "file_id" integer, "data" "text", "start_offset" integer, "end_offset" integer, "color" "text", "parent" integer) RETURNS "jsonb"
    LANGUAGE "plpgsql"
    AS $$DECLARE
    code_id INTEGER;
    result JSONB;
BEGIN
    -- Check if the code exists
    SELECT id INTO code_id
    FROM codes
    WHERE code = new_code AND codes.project_id = add_code_instance.project_id;

    -- If the code does not exist, insert it
    IF code_id IS NULL THEN
        INSERT INTO codes (code, project_id, color, parent)
        VALUES (new_code, add_code_instance.project_id, color, parent)
        RETURNING id INTO code_id;
    END IF;

    -- Insert a new code instance with the code_id
    INSERT INTO code_instances (code_id, data, start_offset, end_offset, file_id)
    VALUES (code_id, data, start_offset, end_offset, file_id);

    -- Return the new or existing code along with its code instances
    SELECT jsonb_build_object(
        'id', c.id,
        'code', c.code,
        'project_id', c.project_id,
        'color', c.color,
        'parent', c.parent,
        'code_instances', (
            SELECT jsonb_agg(jsonb_build_object(
                'id', ci.id,
                'code_id', ci.code_id,
                'data', ci.data,
                'start_offset', ci.start_offset,
                'end_offset', ci.end_offset,
                'file_id', ci.file_id
            ))
            FROM code_instances ci
            WHERE ci.code_id = c.id
        )
    ) INTO result
    FROM codes c
    WHERE c.id = code_id;

    RETURN result;
END;$$;

ALTER FUNCTION "public"."add_code_instance"("new_code" "text", "project_id" integer, "file_id" integer, "data" "text", "start_offset" integer, "end_offset" integer, "color" "text", "parent" integer) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.users (id) values (new.id);
  insert into public.configs (user_id) values (new.id);
  return new;
end;$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."code_instances" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "uuid" DEFAULT "auth"."uid"(),
    "code_id" bigint,
    "data" "text",
    "start_offset" bigint,
    "end_offset" bigint,
    "file_id" bigint
);

ALTER TABLE "public"."code_instances" OWNER TO "postgres";

ALTER TABLE "public"."code_instances" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."code_instances_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."codes" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "project_id" bigint,
    "code" "text",
    "color" "text",
    "parent" bigint,
    "created_by" "uuid" DEFAULT "auth"."uid"(),
    "group" boolean DEFAULT false
);

ALTER TABLE "public"."codes" OWNER TO "postgres";

ALTER TABLE "public"."codes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."codes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."configs" (
    "id" bigint NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "display_name" "text",
    "theme" "text" DEFAULT 'camping'::"text",
    "favorite_themes" "text"[],
    "editor_theme" "text" DEFAULT 'theme'::"text",
    "code_font_size" smallint DEFAULT '12'::smallint,
    "code_line_numbers" boolean DEFAULT false,
    "code_font_family" "text" DEFAULT 'Roboto Mono'::"text",
    "code_line_height" real DEFAULT '1.2'::real,
    "random_theme" boolean DEFAULT false,
    "editor_file_panel_width" bigint DEFAULT '275'::bigint,
    "editor_code_panel_width" bigint DEFAULT '275'::bigint,
    "new_code_random_color" boolean DEFAULT true
);

ALTER TABLE "public"."configs" OWNER TO "postgres";

ALTER TABLE "public"."configs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."configs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."files" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "uuid" DEFAULT "auth"."uid"(),
    "project_id" bigint,
    "parent" bigint,
    "name" "text",
    "type" "text",
    "folder" boolean DEFAULT false
);

ALTER TABLE "public"."files" OWNER TO "postgres";

ALTER TABLE "public"."files" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."files_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."projects" (
    "id" bigint NOT NULL,
    "created_by" "uuid" DEFAULT "auth"."uid"(),
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "description" "text",
    "members" "uuid"[],
    "tags" "text"[],
    "parent" bigint
);

ALTER TABLE "public"."projects" OWNER TO "postgres";

ALTER TABLE "public"."projects" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."projects_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE ONLY "public"."code_instances"
    ADD CONSTRAINT "code_instances_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."codes"
    ADD CONSTRAINT "codes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."configs"
    ADD CONSTRAINT "configs_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."files"
    ADD CONSTRAINT "files_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."code_instances"
    ADD CONSTRAINT "code_instances_code_id_fkey" FOREIGN KEY ("code_id") REFERENCES "public"."codes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."code_instances"
    ADD CONSTRAINT "code_instances_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."code_instances"
    ADD CONSTRAINT "code_instances_file_id_fkey" FOREIGN KEY ("file_id") REFERENCES "public"."files"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."codes"
    ADD CONSTRAINT "codes_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."codes"
    ADD CONSTRAINT "codes_parent_fkey" FOREIGN KEY ("parent") REFERENCES "public"."codes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."codes"
    ADD CONSTRAINT "codes_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."projects"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."configs"
    ADD CONSTRAINT "configs_uid_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."files"
    ADD CONSTRAINT "files_parent_fkey" FOREIGN KEY ("parent") REFERENCES "public"."files"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."files"
    ADD CONSTRAINT "files_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."projects"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."code_instances" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."codes" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."files" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."projects" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."code_instances" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."codes" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."files" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."projects" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable select for users based on user_id" ON "public"."code_instances" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable select for users based on user_id" ON "public"."codes" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable select for users based on user_id" ON "public"."configs" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable select for users based on user_id" ON "public"."files" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable update for users based on uid" ON "public"."configs" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "user_id") = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."code_instances" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."codes" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."files" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."users" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."users" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "Users can only read their own projects" ON "public"."projects" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Users can only update their own projects" ON "public"."projects" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));

CREATE POLICY "Users can update own profile." ON "public"."users" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

ALTER TABLE "public"."code_instances" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."codes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."configs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."files" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."projects" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."add_code_instance"("new_code" "text", "project_id" integer, "file_id" integer, "data" "text", "start_offset" integer, "end_offset" integer, "color" "text", "parent" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."add_code_instance"("new_code" "text", "project_id" integer, "file_id" integer, "data" "text", "start_offset" integer, "end_offset" integer, "color" "text", "parent" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_code_instance"("new_code" "text", "project_id" integer, "file_id" integer, "data" "text", "start_offset" integer, "end_offset" integer, "color" "text", "parent" integer) TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."code_instances" TO "anon";
GRANT ALL ON TABLE "public"."code_instances" TO "authenticated";
GRANT ALL ON TABLE "public"."code_instances" TO "service_role";

GRANT ALL ON SEQUENCE "public"."code_instances_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."code_instances_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."code_instances_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."codes" TO "anon";
GRANT ALL ON TABLE "public"."codes" TO "authenticated";
GRANT ALL ON TABLE "public"."codes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."codes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."codes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."codes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."configs" TO "anon";
GRANT ALL ON TABLE "public"."configs" TO "authenticated";
GRANT ALL ON TABLE "public"."configs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."configs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."configs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."configs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."files" TO "anon";
GRANT ALL ON TABLE "public"."files" TO "authenticated";
GRANT ALL ON TABLE "public"."files" TO "service_role";

GRANT ALL ON SEQUENCE "public"."files_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."files_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."files_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."projects" TO "anon";
GRANT ALL ON TABLE "public"."projects" TO "authenticated";
GRANT ALL ON TABLE "public"."projects" TO "service_role";

GRANT ALL ON SEQUENCE "public"."projects_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."projects_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."projects_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
